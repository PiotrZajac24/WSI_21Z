import matplotlib.pyplot as pltimport jsonimport numpy as npfrom itertools import productfrom copy import deepcopyfrom collections import defaultdictimport argparsefrom pathlib import Pathdef parse_arguments():    parser = argparse.ArgumentParser()    parser.add_argument('--file', default="./results/results_cars.json", type=str)    args = parser.parse_args()    if Path(args.file).suffix != ".json":        raise ValueError("Json file extension required.")    return argsdef plot_classes_by_attribute_values(data, attributes, attr_values):    classes = sorted(list(set(data[data.columns[-1]])))    filters = list(product(*[attr_values[attr] for attr in attributes]))    results = defaultdict(lambda: [])    width = 1/(len(classes)+1)    x = np.arange(len(filters))    for filter in filters:        sample_data = deepcopy(data)        for i, attr in enumerate(attributes):            sample_data = sample_data[sample_data[attr] == filter[i]]        class_count = sample_data[sample_data.columns[-1]].value_counts()        for class_ in classes:            results[class_].append(class_count.get(class_, 0))    fig, ax = plt.subplots()    ax.set_title("Distribution of classes depending on attributes: " + ", ".join(attributes))    ax.set_xlabel("Attribute values: " + ", ".join(attributes))    ax.set_ylabel("Class occurences")    labels = filters = [',\n '.join(f) for f in filters]    for i, (k, v) in enumerate(results.items()):        rect = ax.bar(x - (((i-len(classes)//2))*width), v, width, label=k)        ax.bar_label(rect, padding=2)    ax.set_xticks(x)    ax.set_xticklabels(labels)    ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))    plt.show()def plot_results_no_cross(file):    with open(file) as f:        data = json.load(f)["no_cross"]    results_classes = defaultdict(lambda: defaultdict(lambda: []))    accuracies = []    for k, v in data.items():        class_results = v["metrics"]        for class_, res in class_results.items():            for m in res.keys():                results_classes[m][class_].append((res[m]["mean"], res[m]["std"]))        accuracies.append((v["accuracy"]["mean"], v["accuracy"]["std"]))    for m, res in results_classes.items():        plt.figure().clear()        plt.title(f"{m.title()} values depending on class and percent of training data (average of 15 tests)")        plt.xlabel("Training data in whole set ratio")        plt.ylabel(m.title())        for class_ in res:            mean_std = list(zip(*res[class_]))            mean, std = np.array(mean_std[0]), np.array(mean_std[1])            r = [float(i) for i in data.keys()]            plt.plot(r, mean, label=class_)            plt.fill_between(r, mean-std, mean+std, alpha=0.1)        plt.legend()        plt.show()    plt.figure().clear()    plt.title(f"Accuracy depending on percent of training data (average of 15 tests)")    plt.xlabel("Training data in whole set ratio")    plt.ylabel("Accuracy")    mean_std = list(zip(*accuracies))    mean, std = np.array(mean_std[0]), np.array(mean_std[1])    r = [float(i) for i in data.keys()]    plt.plot(r, mean, label=class_)    plt.fill_between(r, mean-std, mean+std, alpha=0.1)    plt.show()def plot_results_cross(file):    with open(file) as f:        data = json.load(f)["cross"]    results_classes = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: [])))    for k, v in data.items():        class_results = v["classes"]        for class_, res in class_results.items():            for sample in res:                results_classes["recall"][class_][k].append(sample["recall"])                results_classes["precision"][class_][k].append(sample["precision"])    for m, res in results_classes.items():        plt.figure().clear()        plt.title(f"{m.title()} values depending on k for each class")        plt.xlabel("k")        plt.ylabel(m.title())        for class_, k_val in res.items():            mean = np.array([np.mean(val) for val in k_val.values()])            std = np.array([np.std(val) for val in k_val.values()])            r = [int(i) for i in k_val.keys()]            plt.plot(r, mean, label=class_)            plt.fill_between(r, mean-std, mean+std, alpha=0.1)        plt.legend()        plt.show()    plt.figure().clear()    plt.title(f"Accuracy depending on k")    plt.xlabel("k")    plt.ylabel("Accuracy")    mean = np.array([np.mean(v["accuracies"]) for v in data.values()])    std = np.array([np.std(v["accuracies"]) for v in data.values()])    r = [int(i) for i in data.keys()]    plt.plot(r, mean, label=class_)    plt.fill_between(r, mean-std, mean+std, alpha=0.1)    plt.show()if __name__ == "__main__":    args = parse_arguments()    try:        plot_results_no_cross(args.file)        plot_results_cross(args.file)    except Exception as e:        print(e)